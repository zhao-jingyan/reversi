package reversi.ui.console;

import java.io.IOException;
import java.util.ArrayList;

import reversi.core.Game;
import reversi.core.board.Piece;
import reversi.core.board.PieceStatus;
import reversi.core.board.types.ReversiBoard;
import reversi.core.spot.SpotStatus;
import reversi.ui.information.InfoType;
import reversi.ui.information.Information;

public class Output {
    //construct a screen
    public Output(){
    }
    
    //print all the information
    public void print(ArrayList<Game> games, Information info){
        if(games.get(0).getSpot().getSpotStatus() == SpotStatus.INVALID){
            if(info.getInfoType() == InfoType.PASS)
                System.out.println("You shall not pass!");
            else if(info)
        }
        Game game = games.get(0);

        //clear
        clear();

        //head
        System.out.printf("Game: %d\n", game.getGameNum());
        System.out.printf("Black: %d\n",game.getBoard().getBlack());
        System.out.printf("White: %d\n",game.getBoard().getWhite());

        //first row
        System.out.printf(" ");
        for(int i = 0; i < 8; i++){
            System.out.printf(" %c",(char)('A' + i));
        }
        System.out.printf("\n");

        //Left
        for(int row = 0; row < 8; row++){
            System.out.printf("%d ",row + 1);
            for(Piece item : game.getBoard().getPieceBoard()[row]){
                switch(item.getStatus()){
                    case EMPTY -> System.out.printf("· ");
                    case BLACK -> System.out.printf("○ ");
                    case WHITE -> System.out.printf("● ");
                    case VALID -> System.out.printf("x ");
                }
            }
        //Middle 
            switch (row){
                case 3 : System.out.printf("   Game %d" , game.getGameNum()); break;
                case 4 : System.out.printf("   player[%s] %c " , game.getSpot().getP1().getName() , (game.getSpot().getChargePlayer().getPiecetype() == PieceStatus.BLACK) ? '○' : ' ');
                    if(game.getBoard() instanceof ReversiBoard){
                        System.out.printf("%d",game.getBoard().getBlack());
                    }
                    break;
                case 5 : System.out.printf("   player[%s] %c " , game.getSpot().getP2().getName(), (game.getSpot().getChargePlayer().getPiecetype() == PieceStatus.WHITE) ? '●' : ' '); 
                    if(game.getBoard() instanceof ReversiBoard){
                        System.out.printf("%d",game.getBoard().getWhite());
                    }
                    break;  
                default : break;
            }
        //Right
            switch (row){
                
            }

        }

        System.out.printf("\n");


        if(game.getBoard().isfull() || game.getSpot().getSpotStatus() == SpotStatus.END){
            if(game.getBoard().getBlack() > game.getBoard().getWhite())
                System.out.println("Black wins!");
            else if(game.getBoard().getBlack() < game.getBoard().getWhite())
                System.out.println("White wins!");  
            else if(game.getBoard().getBlack() == game.getBoard().getWhite())
                System.out.println("A tied game!");
            System.out.println("Going to board:");
        }
        else{
            //error info
            if(game.getSpot().getSpotStatus() == SpotStatus.INVALID)
                System.out.println("Invalid postion! Please retry!");

            //reminder

            System.out.printf("Player [%s] please enter your move or switch board:",game.getSpot().getChargePlayer().getName());
        }
    }

    //clear the screen，generated by llm
    private static void clear() {
        try {
            // 获取操作系统名称
            String os = System.getProperty("os.name");
            if (os.contains("Windows")) {
                // 在 Windows 系统中，使用 cls 命令清除控制台
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                // 在其他系统中，使用 clear 命令清除控制台
                new ProcessBuilder("bash", "-c", "clear").inheritIO().start().waitFor();
            }
        } catch (IOException | InterruptedException e) {}
    }
}