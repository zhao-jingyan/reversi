package reversi.ui.console;

import java.io.IOException;
import reversi.core.games.game.board.Piece;
import reversi.core.games.game.board.PieceStatus;
import reversi.model.output.OutputInformation;


public class Output{
    public static void print(OutputInformation output){
        switch(output.getOutputType()){
            case REFRESH -> {
                clear();
                //upper rows
                if(output.getGameMode() == reversi.core.games.game.GameMode.PEACE){
                    System.out.println("  A B C D E F G H");
                for(int row = 0; row < 8; row++){
                    System.out.printf("%d ",row + 1);
                    for(Piece item : output.getBoard().getPieceBoard()[row]){
                        switch(item.getStatus()){
                            case EMPTY -> System.out.printf("· ");
                            case BLACK -> System.out.printf("○ ");
                            case WHITE -> System.out.printf("● ");
                            case VALID -> System.out.printf("· ");
                        }
                    }
                    //player info
                    switch (row){
                        case 2 -> System.out.printf("   Game %d\n", output.getGameNum());
                        case 3 -> System.out.printf("   player[%s] %c\n" , output.getP1Name() , output.getChargePlayer().getPiecetype() == PieceStatus.BLACK ? '○' : ' ');
                        case 4 -> System.out.printf("   player[%s] %c\n" , output.getP2Name() , output.getChargePlayer().getPiecetype() == PieceStatus.WHITE ? '●' : ' ');
                        default -> System.out.printf("\n");
                    }
                }
            }
            else{
                System.out.println("  A B C D E F G H");
                for(int row = 0; row < 8; row++){
                    System.out.printf("%d ",row + 1);
                    for(Piece item : output.getBoard().getPieceBoard()[row]){
                        switch(item.getStatus()){
                            case EMPTY -> System.out.printf("· ");
                            case BLACK -> System.out.printf("○ ");
                            case WHITE -> System.out.printf("● ");
                            case VALID -> System.out.printf("+ ");
                        }
                    }
                    //player info
                    switch (row){
                        case 2 -> System.out.printf("   Game %d\n", output.getGameNum());
                        case 3 -> {
                            System.out.printf("   player[%s] %c" , output.getP1Name() , output.getChargePlayer().getPiecetype() == PieceStatus.BLACK ? '○' : ' ');
                            System.out.printf(" %d\n", output.getBoard().getBlack());
                        }
                        case 4 -> {
                            System.out.printf("   player[%s] %c" , output.getP2Name() , output.getChargePlayer().getPiecetype() == PieceStatus.WHITE ? '●' : ' ');
                            System.out.printf(" %d\n", output.getBoard().getWhite());
                        }
                        default -> System.out.printf("\n");
                    }
                }
            }
            }
            case QUIT -> {
                System.out.println("Goodbye!");
                System.exit(0);
            }

            default -> {
                System.out.println("Invalid input. Please try again.");
            }
        }
    }

        //clear the screen，generated by llm
    private static void clear() {
        try {
            // 获取操作系统名称
            String os = System.getProperty("os.name");
            if (os.contains("Windows")) {
                // 在 Windows 系统中，使用 cls 命令清除控制台
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                // 在其他系统中，使用 clear 命令清除控制台
                new ProcessBuilder("bash", "-c", "clear").inheritIO().start().waitFor();
            }
        } catch (IOException | InterruptedException e) {}
    }
}
