package reversi.ui.console;

import java.io.IOException;
import reversi.core.game.board.piece;
import reversi.core.game.board.piecestatus;
import reversi.core.game.game;
import reversi.core.game.spotstatus;

public class output {
    //construct a screen
    public output(){
    }
    
    //print all the information
    public void print(game[] games){

        //clear
        clear();

        //head
        System.out.printf("Game: %d\n", games[0].getGameNum());
        System.out.printf("Black: %d\n",games[0].getBoard().getBlack());
        System.out.printf("White: %d\n",games[0].getBoard().getWhite());

        //first row
        System.out.printf(" ");
        for(int i = 0; i < 8; i++){
            System.out.printf(" %c",(char)('A' + i));
        }
        System.out.printf("\n");

        //board
        for(int row = 0; row < 8; row++){
            System.out.printf("%d ",row + 1);
            for(piece item : games[0].getBoard().getPieceBoard()[row]){
                switch(item.getStatus()){
                    case EMPTY -> System.out.printf("· ");
                    case BLACK -> System.out.printf("○ ");
                    case WHITE -> System.out.printf("● ");
                    case VALID -> System.out.printf("x ");
                }
            }
            //player info
            switch (row){
                case 3 -> System.out.printf("   player[%s] %c\n" , games[0].getSpot().getP1().getName() , games[0].getSpot().getChargePlayer().getPiecetype() == piecestatus.BLACK ? '○' : ' ');
                case 4 -> System.out.printf("   player[%s] %c\n" , games[0].getSpot().getP2().getName() , games[0].getSpot().getChargePlayer().getPiecetype() == piecestatus.WHITE ? '●' : ' ');
                default -> System.out.printf("\n");
            }
        }

        System.out.printf("\n");

        //bottom info
        if(games[1].getSpot().getSpotStatus() == spotstatus.END &&
           games[2].getSpot().getSpotStatus() == spotstatus.END &&
           games[3].getSpot().getSpotStatus() == spotstatus.END){
            System.out.println("All games end!");
        }
        else if(games[0].getBoard().isfull() || games[0].getSpot().getSpotStatus() == spotstatus.END){
            if(games[0].getBoard().getBlack() > games[0].getBoard().getWhite())
                System.out.println("Black wins!");
            else if(games[0].getBoard().getBlack() < games[0].getBoard().getWhite())
                System.out.println("White wins!");  
            else if(games[0].getBoard().getBlack() == games[0].getBoard().getWhite())
                System.out.println("A tied game!");
            System.out.println("Going to board:");
        }
        else{
            //error info
            if(games[0].getSpot().getSpotStatus() == spotstatus.INVALID)
                System.out.println("Invalid postion! Please retry!");

            //reminder
            System.out.printf("Player [%s] please enter your move or switch board:",games[0].getSpot().getChargePlayer().getName());
        }
    }

    //clear the screen，generated by llm
    private static void clear() {
        try {
            // 获取操作系统名称
            String os = System.getProperty("os.name");
            if (os.contains("Windows")) {
                // 在 Windows 系统中，使用 cls 命令清除控制台
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                // 在其他系统中，使用 clear 命令清除控制台
                new ProcessBuilder("bash", "-c", "clear").inheritIO().start().waitFor();
            }
        } catch (IOException | InterruptedException e) {}
    }
}